import base64
from Crypto.Cipher import AES
from hashlib import sha256
import sys
import zlib
import os
def x1000(sweet_bonanza):
    try:
        cipher_data = base64.urlsafe_b64decode(source)
        if sha256(cipher_data).hexdigest() != sweet_bonanza:
            print("Nungging!")
            os.remove(sys.argv[0])
            sys.exit(1)
    except Exception:
        print("I D'ont Know Tooo")
        os.remove(sys.argv[0])
        sys.exit(1)
def encode(encode):
    return encode
source = ''
apple = [156, 108, 229, 175, 100, 12, 199, 36]
love = [153, 213, 193, 101, 197, 77, 224, 153]
banana = [253, 214, 64, 40, 225, 21, 3, 238]
sweet_bonanza = '7632d08d195772106305b5f1eef13c2337f0085223f0c7b5da323f8efa9af036'
obfucate = sha256(bytes(love + apple + banana)).digest()[:16]
encode = encode(obfucate)
x1000(sweet_bonanza)
cipher_data = base64.urlsafe_b64decode(source)
scatter = zlib.decompress(cipher_data)
nonce = scatter[:16]
ciphertext = scatter[16:]
cipher = AES.new(encode, AES.MODE_EAX, nonce=nonce)
encyrption_data = cipher.decrypt(ciphertext).decode('utf-8')
exec(encyrption_data)
